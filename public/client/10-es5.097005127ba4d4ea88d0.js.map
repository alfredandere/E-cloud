{"version":3,"sources":["webpack:///src/common/workspaces/crupdate-workspace-modal/crupdate-workspace-modal.component.ts","webpack:///src/common/workspaces/crupdate-workspace-modal/crupdate-workspace-modal.component.html","webpack:///src/common/workspaces/leave-workspace-confirmation.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/radio.js","webpack:///src/common/core/ui/overlay-panel/positions/right-position.ts","webpack:///src/common/core/ui/info-popover/info-popover.component.html","webpack:///src/common/core/ui/info-popover/info-popover.component.ts","webpack:///src/common/workspaces/workspace-index/workspace-index.component.html","webpack:///src/common/workspaces/workspace-index/workspace-index.component.ts","webpack:///src/app/drive/workspace-wrapper.module.ts","webpack:///src/common/core/ui/info-popover/info-popover.module.ts","webpack:///src/common/workspaces/workspace.module.ts","webpack:///src/common/workspaces/workspace-messages.ts","webpack:///src/common/workspaces/manage-workspace-members-modal/manage-workspace-members-modal.component.html","webpack:///src/common/workspaces/manage-workspace-members-modal/manage-workspace-members-modal.component.ts"],"names":["CrupdateWorkspaceModalComponent","dialogRef","data","workspaces","toast","loading$","errors$","form","name","workspace","this","patchValue","next","update","id","value","create","pipe","subscribe","response","open","close","errResponse","errors","LEAVE_WORKSPACE_CONFIRMATION","title","body","bodyBold","ok","_c0","_c1","enterDuration","_c2","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","color","nextUniqueId","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatRadioGroup","multi","MatRadioChange","source","MAT_RADIO_GROUP","_MatRadioGroupBase","_changeDetector","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","_controlValueAccessorChangeFn","onTouched","change","checked","_radios","forEach","radio","_markForCheck","emit","markForCheck","fn","isDisabled","disabled","_updateRadioButtonNames","v","_markRadiosForCheck","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","selected","c","ɵfac","t","ɵdir","type","inputs","labelPosition","required","outputs","ɵMatRadioGroup_BaseFactory","selectors","contentQueries","rf","ctx","dirIndex","_t","MatRadioButton","hostAttrs","exportAs","features","_MatRadioButtonMixinBase","_elementRef","_MatRadioButtonBase","radioGroup","elementRef","_focusMonitor","_radioDispatcher","_animationMode","_providerOverride","tabIndex","super","_uniqueId","_checked","_removeUniqueSelectionListener","listen","options","focusVia","_inputElement","monitor","focusOrigin","_touch","stopMonitoring","disableRipple","event","stopPropagation","groupValueChanged","_emitChangeEvent","newCheckedState","notify","_setDisabled","_color","String","viewQuery","first","ariaLabel","ariaLabelledby","ariaDescribedby","changeDetector","focusMonitor","radioDispatcher","animationMode","providerOverride","ɵcmp","hostVars","hostBindings","nativeElement","focus","ngContentSelectors","decls","vars","consts","template","$event","_onInputChange","_onInputClick","_r0","inputId","_isRippleDisabled","directives","styles","encapsulation","changeDetection","MatRadioModule","ɵmod","ɵinj","imports","RIGHT_POSITION","originX","originY","overlayX","overlayY","offsetX","InfoPopoverComponent","overlay","viewContainerRef","overlayRef","closePopover","offsetY","content","origin","infoButton","position","hasBackdrop","scrollStrategy","panelClass","getPanelEl","addEventListener","openPopover","e","toElement","relatedTarget","classList","contains","togglePopover","onMouseLeave","WorkspaceWrapperModule","RoutingModule","WorkspaceIndexComponent","datatable","currentUser","router","modal","workspaceConfig","workspaces$","data$","init","uri","BASE_URI","staticParams","userId","get","confirmResourceDeletion","reset","message","Default","openCrupdateResourceModal","url","indexOf","afterClosed","confirmed","deleteMember","showCrupdateWorkspaceModal","forChild","path","component","WorkspaceModule","InfoPopoverModule","components","crupdateModal","manageMembers","WorkspaceMessages","LEFT_WORKSPACE","MEMBER_DELETED","INVITES_SENT","INVITE_RESENT","ROLE_ASSIGNED","ManageWorkspaceMembersModalComponent","valueLists","inviting$","BehaviorSubject","deleting$","loadingMembers$","workspaceRoles$","members$","peopleToInvite","canInvite","canEdit","canDelete","workspaceRoles","finalize","invites","members","setCurrentUserPermissions","emails","filter","email","find","m","length","payload","roleId","r","invitePeople","invite","resendInvite","member","role","changeRole","i","findIndex","role_name","role_id","model_type","deleteInvite","splice","show","is_owner","permissions","p","opacity","left","right"],"mappings":"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","file":"x","sourcesContent":["import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { Toast } from '@common/core/ui/toast.service';\nimport { finalize } from 'rxjs/operators';\nimport { BackendErrorResponse } from '@common/core/types/backend-error-response';\nimport { Workspace } from '../types/workspace';\nimport { WorkspacesService } from '../workspaces.service';\n\nexport interface CrupdateWorkspaceModalData {\n    workspace?: Workspace;\n}\n\n@Component({\n    selector: 'crupdate-workspace-modal',\n    templateUrl: './crupdate-workspace-modal.component.html',\n    styleUrls: ['./crupdate-workspace-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CrupdateWorkspaceModalComponent {\n    public loading$ = new BehaviorSubject(false);\n    public errors$ = new BehaviorSubject<{name?: string}>({});\n    public form = new FormGroup({\n        name: new FormControl(),\n    });\n\n    constructor(\n        private dialogRef: MatDialogRef<CrupdateWorkspaceModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateWorkspaceModalData,\n        private workspaces: WorkspacesService,\n        private toast: Toast,\n    ) {\n        if (data.workspace) {\n            this.form.patchValue(data.workspace);\n        }\n    }\n\n    public confirm() {\n        this.loading$.next(true);\n        const request = this.data.workspace ?\n            this.workspaces.update(this.data.workspace.id, this.form.value) :\n            this.workspaces.create(this.form.value);\n        request.pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.toast.open(this.data.workspace ? 'Workspace updated.' : 'Workspace created.');\n                this.close(response.workspace);\n            }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\n    }\n\n    public close(workspace?: Workspace) {\n        this.dialogRef.close(workspace);\n    }\n}\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title>\n        <span trans *ngIf=\"!data.workspace\">Create Workspace</span>\n        <span trans *ngIf=\"data.workspace\">Update Workspace</span>\n    </h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<form (ngSubmit)=\"confirm()\" ngNativeValidate [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <mat-dialog-content class=\"many-inputs\">\n        <div class=\"input-container name-container\">\n            <label for=\"crupdate-workspace-name\" trans>Name</label>\n            <input type=\"text\" id=\"crupdate-workspace-name\" formControlName=\"name\" required minlength=\"3\">\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>{{data.workspace ? 'Update' : 'Create'}}</button>\n    </mat-dialog-actions>\n</form>\n","import {ConfirmModalData} from '@common/core/ui/confirm-modal/confirm-modal.component';\r\n\r\nexport const LEAVE_WORKSPACE_CONFIRMATION: ConfirmModalData = {\r\n    title: `Leave Workspace`,\r\n    body:  `Are you sure you want to leave this workspace?`,\r\n    bodyBold: `All resources you've created in the workspace will be transferred to workspace owner.`,\r\n    ok: 'Leave'\r\n};\r\n","import { InjectionToken, forwardRef, EventEmitter, Directive, ChangeDetectorRef, Output, Input, ContentChildren, ElementRef, ViewChild, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, NgModule } from '@angular/core';\nimport { mixinDisableRipple, mixinTabIndex, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/collections';\nimport * as ɵngcc3 from '@angular/material/core';\n\nconst _c0 = [\"input\"];\nconst _c1 = function () { return { enterDuration: 150 }; };\nconst _c2 = [\"*\"];\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent'\n    };\n}\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true\n};\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nclass MatRadioChange {\n    constructor(\n    /** The MatRadioButton that emits the change event. */\n    source, \n    /** The value of the MatRadioButton. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\n/**\n * Base class with all of the `MatRadioGroup` functionality.\n * @docs-private\n */\nclass _MatRadioGroupBase {\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n    }\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() { return this._name; }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() { return this._value; }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() { return this._selected; }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() { return this._required; }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this._markRadiosForCheck();\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n}\n_MatRadioGroupBase.ɵfac = function _MatRadioGroupBase_Factory(t) { return new (t || _MatRadioGroupBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\n_MatRadioGroupBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatRadioGroupBase, inputs: { name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: \"disabled\", required: \"required\", color: \"color\" }, outputs: { change: \"change\" } });\n_MatRadioGroupBase.ctorParameters = () => [\n    { type: ChangeDetectorRef }\n];\n_MatRadioGroupBase.propDecorators = {\n    change: [{ type: Output }],\n    color: [{ type: Input }],\n    name: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    value: [{ type: Input }],\n    selected: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatRadioGroupBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }]; }, { change: [{\n            type: Output\n        }], name: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], selected: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }] }); })();\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup extends _MatRadioGroupBase {\n}\nMatRadioGroup.ɵfac = function MatRadioGroup_Factory(t) { return ɵMatRadioGroup_BaseFactory(t || MatRadioGroup); };\nMatRadioGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatRadioGroup, selectors: [[\"mat-radio-group\"]], contentQueries: function MatRadioGroup_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatRadioButton, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._radios = _t);\n    } }, hostAttrs: [\"role\", \"radiogroup\", 1, \"mat-radio-group\"], exportAs: [\"matRadioGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatRadioGroup.propDecorators = {\n    _radios: [{ type: ContentChildren, args: [forwardRef(() => MatRadioButton), { descendants: true },] }]\n};\nconst ɵMatRadioGroup_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatRadioGroup);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioGroup, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-radio-group',\n                exportAs: 'matRadioGroup',\n                providers: [\n                    MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                    { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                ],\n                host: {\n                    'role': 'radiogroup',\n                    'class': 'mat-radio-group'\n                }\n            }]\n    }], null, { _radios: [{\n            type: ContentChildren,\n            args: [forwardRef(() => MatRadioButton), { descendants: true }]\n        }] }); })();\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nclass MatRadioButtonBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nconst _MatRadioButtonMixinBase = mixinDisableRipple(mixinTabIndex(MatRadioButtonBase));\n/**\n * Base class with all of the `MatRadioButton` functionality.\n * @docs-private\n */\nclass _MatRadioButtonBase extends _MatRadioButtonMixinBase {\n    constructor(radioGroup, elementRef, _changeDetector, _focusMonitor, _radioDispatcher, _animationMode, _providerOverride, tabIndex) {\n        super(elementRef);\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._animationMode = _animationMode;\n        this._providerOverride = _providerOverride;\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        if (tabIndex) {\n            this.tabIndex = coerceNumberProperty(tabIndex, 0);\n        }\n        this._removeUniqueSelectionListener =\n            _radioDispatcher.listen((id, name) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n    /** Whether this radio button is checked. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        const newCheckedState = coerceBooleanProperty(value);\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() { return this._value; }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(coerceBooleanProperty(value));\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Theme color of the radio button. */\n    get color() {\n        return this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            this._providerOverride && this._providerOverride.color || 'accent';\n    }\n    set color(newValue) { this._color = newValue; }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Focuses the radio button. */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /**\n     * Triggered when the radio button received a click or the input recognized any change.\n     * Clicking on a label element, will trigger a change event on the associated input.\n     */\n    _onInputChange(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this._emitChangeEvent();\n        if (this.radioGroup) {\n            this.radioGroup._controlValueAccessorChangeFn(this.value);\n            if (groupValueChanged) {\n                this.radioGroup._emitChangeEvent();\n            }\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n}\n_MatRadioButtonBase.ɵfac = function _MatRadioButtonBase_Factory(t) { return new (t || _MatRadioButtonBase)(ɵngcc0.ɵɵdirectiveInject(_MatRadioGroupBase), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(String), ɵngcc0.ɵɵdirectiveInject(undefined), ɵngcc0.ɵɵdirectiveInject(String)); };\n_MatRadioButtonBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatRadioButtonBase, viewQuery: function _MatRadioButtonBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, inputs: { id: \"id\", checked: \"checked\", value: \"value\", labelPosition: \"labelPosition\", disabled: \"disabled\", required: \"required\", color: \"color\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"] }, outputs: { change: \"change\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatRadioButtonBase.ctorParameters = () => [\n    { type: _MatRadioGroupBase },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String },\n    { type: undefined },\n    { type: String }\n];\n_MatRadioButtonBase.propDecorators = {\n    id: [{ type: Input }],\n    name: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    checked: [{ type: Input }],\n    value: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    disabled: [{ type: Input }],\n    required: [{ type: Input }],\n    color: [{ type: Input }],\n    change: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatRadioButtonBase, [{\n        type: Directive\n    }], function () { return [{ type: _MatRadioGroupBase }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String }, { type: undefined }, { type: String }]; }, { id: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], checked: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], color: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\nclass MatRadioButton extends _MatRadioButtonBase {\n    constructor(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex) {\n        super(radioGroup, elementRef, changeDetector, focusMonitor, radioDispatcher, animationMode, providerOverride, tabIndex);\n    }\n}\nMatRadioButton.ɵfac = function MatRadioButton_Factory(t) { return new (t || MatRadioButton)(ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_GROUP, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_RADIO_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinjectAttribute('tabindex')); };\nMatRadioButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatRadioButton, selectors: [[\"mat-radio-button\"]], hostAttrs: [1, \"mat-radio-button\"], hostVars: 17, hostBindings: function MatRadioButton_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatRadioButton_focus_HostBindingHandler() { return ctx._inputElement.nativeElement.focus(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", -1)(\"id\", ctx.id)(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-checked\", ctx.checked)(\"mat-radio-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-primary\", ctx.color === \"primary\")(\"mat-accent\", ctx.color === \"accent\")(\"mat-warn\", ctx.color === \"warn\");\n    } }, inputs: { disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, exportAs: [\"matRadioButton\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 13, vars: 19, consts: [[1, \"mat-radio-label\"], [\"label\", \"\"], [1, \"mat-radio-container\"], [1, \"mat-radio-outer-circle\"], [1, \"mat-radio-inner-circle\"], [\"type\", \"radio\", 1, \"mat-radio-input\", \"cdk-visually-hidden\", 3, \"id\", \"checked\", \"disabled\", \"tabIndex\", \"required\", \"change\", \"click\"], [\"input\", \"\"], [\"mat-ripple\", \"\", 1, \"mat-radio-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-radio-persistent-ripple\"], [1, \"mat-radio-label-content\"], [2, \"display\", \"none\"]], template: function MatRadioButton_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"input\", 5, 6);\n        ɵngcc0.ɵɵlistener(\"change\", function MatRadioButton_Template_input_change_5_listener($event) { return ctx._onInputChange($event); })(\"click\", function MatRadioButton_Template_input_click_5_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"span\", 10);\n        ɵngcc0.ɵɵtext(11, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"value\", ctx.value)(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(18, _c1));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-radio-label-before\", ctx.labelPosition == \"before\");\n    } }, directives: [ɵngcc3.MatRipple], styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatRadioButton.ctorParameters = () => [\n    { type: MatRadioGroup, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_GROUP,] }] },\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: UniqueSelectionDispatcher },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_RADIO_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioButton, [{\n        type: Component,\n        args: [{\n                selector: 'mat-radio-button',\n                template: \"<!-- TODO(jelbourn): render the radio on either side of the content -->\\n<!-- TODO(mtlin): Evaluate trade-offs of using native radio vs. cost of additional bindings. -->\\n<label [attr.for]=\\\"inputId\\\" class=\\\"mat-radio-label\\\" #label>\\n  <!-- The actual 'radio' part of the control. -->\\n  <div class=\\\"mat-radio-container\\\">\\n    <div class=\\\"mat-radio-outer-circle\\\"></div>\\n    <div class=\\\"mat-radio-inner-circle\\\"></div>\\n    <input #input class=\\\"mat-radio-input cdk-visually-hidden\\\" type=\\\"radio\\\"\\n        [id]=\\\"inputId\\\"\\n        [checked]=\\\"checked\\\"\\n        [disabled]=\\\"disabled\\\"\\n        [tabIndex]=\\\"tabIndex\\\"\\n        [attr.name]=\\\"name\\\"\\n        [attr.value]=\\\"value\\\"\\n        [required]=\\\"required\\\"\\n        [attr.aria-label]=\\\"ariaLabel\\\"\\n        [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n        [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n        (change)=\\\"_onInputChange($event)\\\"\\n        (click)=\\\"_onInputClick($event)\\\">\\n\\n    <!-- The ripple comes after the input so that we can target it with a CSS\\n         sibling selector when the input is focused. -->\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n\\n  <!-- The label content for radio control. -->\\n  <div class=\\\"mat-radio-label-content\\\" [class.mat-radio-label-before]=\\\"labelPosition == 'before'\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </div>\\n</label>\\n\",\n                inputs: ['disableRipple', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                exportAs: 'matRadioButton',\n                host: {\n                    'class': 'mat-radio-button',\n                    '[class.mat-radio-checked]': 'checked',\n                    '[class.mat-radio-disabled]': 'disabled',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-primary]': 'color === \"primary\"',\n                    '[class.mat-accent]': 'color === \"accent\"',\n                    '[class.mat-warn]': 'color === \"warn\"',\n                    // Needs to be -1 so the `focus` event still fires.\n                    '[attr.tabindex]': '-1',\n                    '[attr.id]': 'id',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[attr.aria-describedby]': 'null',\n                    // Note: under normal conditions focus shouldn't land on this element, however it may be\n                    // programmatically set, for example inside of a focus trap, in this case we want to forward\n                    // the focus to the native element.\n                    '(focus)': '_inputElement.nativeElement.focus()'\n                },\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.mat-radio-label{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.mat-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.mat-radio-outer-circle{box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:border-color ease 280ms;width:20px;border-width:2px;border-style:solid;border-radius:50%}._mat-animation-noopable .mat-radio-outer-circle{transition:none}.mat-radio-inner-circle{border-radius:50%;box-sizing:border-box;height:20px;left:0;position:absolute;top:0;transition:transform ease 280ms,background-color ease 280ms;width:20px;transform:scale(0.001)}._mat-animation-noopable .mat-radio-inner-circle{transition:none}.mat-radio-checked .mat-radio-inner-circle{transform:scale(0.5)}.cdk-high-contrast-active .mat-radio-checked .mat-radio-inner-circle{border:solid 10px}.mat-radio-label-content{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto;display:inline-block;order:0;line-height:inherit;padding-left:8px;padding-right:0}[dir=rtl] .mat-radio-label-content{padding-right:8px;padding-left:0}.mat-radio-label-content.mat-radio-label-before{order:-1;padding-left:0;padding-right:8px}[dir=rtl] .mat-radio-label-content.mat-radio-label-before{padding-right:0;padding-left:8px}.mat-radio-disabled,.mat-radio-disabled .mat-radio-label{cursor:default}.mat-radio-button .mat-radio-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-radio-button .mat-radio-ripple .mat-ripple-element:not(.mat-radio-persistent-ripple){opacity:.16}.mat-radio-persistent-ripple{width:100%;height:100%;transform:none}.mat-radio-container:hover .mat-radio-persistent-ripple{opacity:.04}.mat-radio-button:not(.mat-radio-disabled).cdk-keyboard-focused .mat-radio-persistent-ripple,.mat-radio-button:not(.mat-radio-disabled).cdk-program-focused .mat-radio-persistent-ripple{opacity:.12}.mat-radio-persistent-ripple,.mat-radio-disabled .mat-radio-container:hover .mat-radio-persistent-ripple{opacity:0}@media(hover: none){.mat-radio-container:hover .mat-radio-persistent-ripple{display:none}}.mat-radio-input{bottom:0;left:50%}.cdk-high-contrast-active .mat-radio-disabled{opacity:.5}\\n\"]\n            }]\n    }], function () { return [{ type: MatRadioGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_GROUP]\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.UniqueSelectionDispatcher }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_RADIO_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatRadioModule {\n}\nMatRadioModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatRadioModule });\nMatRadioModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatRadioModule_Factory(t) { return new (t || MatRadioModule)(); }, imports: [[MatRippleModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatRadioModule, { declarations: function () { return [MatRadioGroup, MatRadioButton]; }, imports: function () { return [MatRippleModule, MatCommonModule]; }, exports: function () { return [MatRadioGroup, MatRadioButton, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatRadioModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatRippleModule, MatCommonModule],\n                exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n                declarations: [MatRadioGroup, MatRadioButton]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule, _MatRadioButtonBase, _MatRadioGroupBase };\n\n//# sourceMappingURL=radio.js.map","import { ConnectedPosition } from '@angular/cdk/overlay';\r\n\r\nexport const RIGHT_POSITION: ConnectedPosition[] = [\r\n    {originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: 5},\r\n    {originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: 5},\r\n];\r\n","<button type=\"button\" mat-icon-button (click)=\"togglePopover()\" (mouseenter)=\"openPopover()\" (mouseleave)=\"onMouseLeave($event)\">\n    <mat-icon #infoIcon svgIcon=\"info\" class=\"info-icon\"></mat-icon>\n</button>\n\n<ng-template #popoverContent>\n    <ng-content></ng-content>\n</ng-template>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\n\n@Component({\n    selector: 'info-popover',\n    templateUrl: './info-popover.component.html',\n    styleUrls: ['./info-popover.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n})\nexport class InfoPopoverComponent {\n    @ViewChild('infoIcon', { read: ElementRef }) infoButton: ElementRef<HTMLElement>;\n    @ViewChild('popoverContent') content: TemplateRef<any>;\n    private overlayRef: OverlayPanelRef;\n\n    constructor(\n        private overlay: OverlayPanel,\n        private viewContainerRef: ViewContainerRef,\n    ) {}\n\n    public openPopover() {\n        if (this.overlayRef) {\n            this.closePopover();\n        }\n        const position = {...RIGHT_POSITION};\n        position[0].offsetY = -15;\n        this.overlayRef = this.overlay.open(this.content, {\n            origin: this.infoButton,\n            position: RIGHT_POSITION,\n            hasBackdrop: false,\n            scrollStrategy: 'close',\n            viewContainerRef: this.viewContainerRef,\n            panelClass: 'info-popover-panel'\n        });\n\n        this.overlayRef.getPanelEl().addEventListener('mouseleave', () => {\n            this.closePopover();\n        });\n    }\n\n    public closePopover() {\n        if (this.overlayRef) {\n            this.overlayRef.close();\n            this.overlayRef = null;\n        }\n    }\n\n    public togglePopover() {\n        if (this.overlayRef) {\n            this.closePopover();\n        } else {\n            this.openPopover();\n        }\n    }\n\n    public onMouseLeave(e: MouseEvent) {\n        const toElement = (e['toElement'] || e.relatedTarget) as HTMLElement;\n        if ( !toElement || !toElement.classList.contains('info-popover-panel')) {\n            this.closePopover();\n        }\n    }\n}\n","<div class=\"datatable responsive-table\">\n    <datatable-header pluralResourceName=\"workspaces\">\n        <ng-container leftContent>\n            <button mat-raised-button color=\"accent\" (click)=\"showCrupdateWorkspaceModal()\" [disabled]=\"!currentUser.hasPermission('workspaces.create')\" trans>New workspace</button>\n            <info-popover>\n                <strong trans>Workspaces and Teammates</strong>\n                <p trans>{{workspaceConfig.description}}</p>\n            </info-popover>\n        </ng-container>\n    </datatable-header>\n    <table class=\"material-table\">\n        <thead>\n        <tr>\n            <th table-sort-header trans>Name</th>\n            <th table-sort-header=\"owner_id\" trans>Owner</th>\n            <th trans>Your Role</th>\n            <th table-sort-header=\"members_count\" trans>Members</th>\n            <th trans>Last Updated</th>\n            <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let workspace of workspaces$ | async\">\n            <td data-label=\"Name\">{{workspace.name}}</td>\n            <td data-label=\"Owner\">\n                <user-column [user]=\"workspace.owner\"></user-column>\n            </td>\n            <td data-label=\"Your Role\">{{workspace.currentUser?.role_name || '-'}}</td>\n            <td data-label=\"Members\">{{ workspace.members_count || '-' }}</td>\n            <td data-label=\"Last Updated\">{{workspace.updated_at | formattedDate}}</td>\n            <td class=\"edit-column\">\n                <button mat-icon-button (click)=\"openWorkspaceMembersModal(workspace)\" [matTooltip]=\"'Manage Members' | trans\">\n                    <mat-icon svgIcon=\"group-add\"></mat-icon>\n                </button>\n                <ng-container *ngIf=\"workspace.owner_id === this.currentUser.get('id')\">\n                    <button mat-icon-button (click)=\"showCrupdateWorkspaceModal(workspace)\" [matTooltip]=\"'Edit workspace' | trans\">\n                        <mat-icon svgIcon=\"edit\"></mat-icon>\n                    </button>\n                    <button mat-icon-button (click)=\"maybeDeleteWorkspace(workspace)\" [matTooltip]=\"'Delete workspace' | trans\">\n                        <mat-icon svgIcon=\"delete\"></mat-icon>\n                    </button>\n                </ng-container>\n                <ng-container *ngIf=\"workspace.owner_id !== this.currentUser.get('id')\">\n                    <button mat-icon-button (click)=\"maybeLeaveWorkspace(workspace)\" [matTooltip]=\"'Leave workspace' | trans\">\n                        <mat-icon svgIcon=\"exit-to-app\"></mat-icon>\n                    </button>\n                </ng-container>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <no-results-message svgImage=\"shared-workspace.svg\" *ngIf=\"datatable.paginator.noResults$ | async\">\n        <span primary-text trans>No workspaces have been created yet</span>\n    </no-results-message>\n    <datatable-footer></datatable-footer>\n</div>\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {Router} from '@angular/router';\nimport {HttpErrors} from '@common/core/http/errors/http-errors.enum';\nimport {WorkspacesService} from '../workspaces.service';\nimport {Workspace} from '../types/workspace';\nimport {CrupdateWorkspaceModalComponent} from '../crupdate-workspace-modal/crupdate-workspace-modal.component';\nimport {DatatableService} from '@common/datatable/datatable.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {ManageWorkspaceMembersModalComponent} from '../manage-workspace-members-modal/manage-workspace-members-modal.component';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Observable} from 'rxjs';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {LEAVE_WORKSPACE_CONFIRMATION} from '../leave-workspace-confirmation';\nimport { WORKSPACE_CONFIG, WorkspaceConfig } from '../workspace-config';\n\n@Component({\n    selector: 'workspace-index',\n    templateUrl: './workspace-index.component.html',\n    styleUrls: ['./workspace-index.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [DatatableService],\n})\nexport class WorkspaceIndexComponent implements OnInit {\n    public workspaces$ = this.datatable.data$ as Observable<Workspace[]>;\n    constructor(\n        public datatable: DatatableService<Workspace>,\n        public currentUser: CurrentUser,\n        private workspaces: WorkspacesService,\n        private toast: Toast,\n        private router: Router,\n        private modal: Modal,\n        @Inject(WORKSPACE_CONFIG) public workspaceConfig: WorkspaceConfig,\n    ) {}\n\n    ngOnInit() {\n        this.datatable.init({\n            uri: WorkspacesService.BASE_URI,\n            staticParams: {\n                userId: this.currentUser.get('id'),\n            }\n        });\n    }\n\n    public maybeDeleteWorkspace(workspace: Workspace) {\n        this.datatable.confirmResourceDeletion('workspace')\n            .subscribe(() => {\n                this.workspaces.delete([workspace.id]).subscribe(() => {\n                    this.datatable.reset();\n                    this.toast.open('Workspace deleted.');\n                }, (errResponse: BackendErrorResponse) => {\n                    this.toast.open(errResponse.message || HttpErrors.Default);\n                });\n            });\n    }\n\n    public showCrupdateWorkspaceModal(workspace?: Workspace) {\n        this.datatable.openCrupdateResourceModal(CrupdateWorkspaceModalComponent, {workspace})\n            .subscribe();\n    }\n\n    public openWorkspaceMembersModal(workspace: Workspace) {\n        this.modal.open(ManageWorkspaceMembersModalComponent, {workspace});\n    }\n\n    public filterByUser(): boolean {\n        return this.router.url.indexOf('admin') === -1;\n    }\n\n    public maybeLeaveWorkspace(workspace: Workspace) {\n        this.modal.open(ConfirmModalComponent, LEAVE_WORKSPACE_CONFIRMATION)\n            .afterClosed()\n            .subscribe(confirmed => {\n                if (confirmed) {\n                    this.workspaces.deleteMember(workspace.id, this.currentUser.get('id'))\n                        .subscribe(() => this.datatable.reset());\n                }\n            });\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WorkspaceModule } from '../../common/workspaces/workspace.module';\nimport { RouterModule } from '@angular/router';\nimport { WorkspaceIndexComponent } from '../../common/workspaces/workspace-index/workspace-index.component';\n\n@NgModule({\n    imports: [RouterModule.forChild([\n        {path: '', component: WorkspaceIndexComponent}\n    ])],\n    exports: [RouterModule]\n})\nclass RoutingModule { }\n\n@NgModule({\n    declarations: [],\n    imports: [\n        CommonModule,\n        WorkspaceModule,\n        RoutingModule\n  ]\n})\nexport class WorkspaceWrapperModule { }\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InfoPopoverComponent} from '@common/core/ui/info-popover/info-popover.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport { DocsInfoPopoverComponent } from './docs-info-popover/docs-info-popover.component';\n\n\n@NgModule({\n    declarations: [\n        InfoPopoverComponent,\n        DocsInfoPopoverComponent,\n    ],\n    imports: [\n        CommonModule,\n\n        // material\n        MatIconModule,\n        MatButtonModule,\n    ],\n    exports: [\n        InfoPopoverComponent,\n        DocsInfoPopoverComponent,\n    ]\n})\nexport class InfoPopoverModule {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CrupdateWorkspaceModalComponent } from './crupdate-workspace-modal/crupdate-workspace-modal.component';\nimport { ManageWorkspaceMembersModalComponent } from './manage-workspace-members-modal/manage-workspace-members-modal.component';\nimport { WorkspaceIndexComponent } from './workspace-index/workspace-index.component';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { TranslationsModule } from '../core/translations/translations.module';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { DatatableModule } from '../datatable/datatable.module';\nimport { InfoPopoverModule } from '../core/ui/info-popover/info-popover.module';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { FormatPipesModule } from '../core/ui/format-pipes/format-pipes.module';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { SkeletonModule } from '../core/ui/skeleton/skeleton.module';\nimport { ChipsModule } from '../core/ui/chips/chips.module';\nimport { MatMenuModule } from '@angular/material/menu';\n\n@NgModule({\n  declarations: [\n      CrupdateWorkspaceModalComponent,\n      ManageWorkspaceMembersModalComponent,\n      WorkspaceIndexComponent,\n  ],\n  imports: [\n    CommonModule,\n      FormsModule,\n      ReactiveFormsModule,\n      TranslationsModule,\n      DatatableModule,\n      InfoPopoverModule,\n      FormatPipesModule,\n      SkeletonModule,\n      ChipsModule,\n\n      // material\n      MatIconModule,\n      MatButtonModule,\n      MatDialogModule,\n      MatRadioModule,\n      MatTooltipModule,\n      MatProgressBarModule,\n      MatMenuModule,\n  ],\n  exports: [\n    CrupdateWorkspaceModalComponent,\n    ManageWorkspaceMembersModalComponent,\n    WorkspaceIndexComponent,\n  ]\n})\nexport class WorkspaceModule {\n  static components = {\n    crupdateModal: CrupdateWorkspaceModalComponent,\n    manageMembers: ManageWorkspaceMembersModalComponent,\n  };\n}\n","export enum WorkspaceMessages {\r\n    LEFT_WORKSPACE = 'You have left the workspace.',\r\n    MEMBER_DELETED = 'Member Deleted.',\r\n    INVITES_SENT = 'Invites Sent.',\r\n    INVITE_RESENT = 'Resent invite.',\r\n    ROLE_ASSIGNED = 'Role Assigned.',\r\n}\r\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title trans>Manage workspace members</h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<mat-dialog-content style=\"overflow: hidden\" #container>\n    <div class=\"invite-container\" *ngIf=\"canInvite\" @fadeIn>\n        <div class=\"input-container\">\n            <label for=\"workspace-emails-input\" trans>Invite by email</label>\n            <div class=\"input-with-action\">\n                <chip-input id=\"workspace-emails-input\" placeholder=\"Email addresses\" [emailsInput]=\"true\" [formControl]=\"peopleToInvite\"></chip-input>\n                <button\n                    type=\"button\"\n                    class=\"add-tags-button\"\n                    mat-flat-button\n                    color=\"accent\"\n                    (click)=\"invitePeople()\"\n                    [disabled]=\"(inviting$ | async) || !(peopleToInvite.valueChanges | async)?.length\"\n                    trans\n                >Invite\n                </button>\n            </div>\n        </div>\n        <mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"inviting$ | async\"></mat-progress-bar>\n    </div>\n\n    <div class=\"header\">\n        <mat-icon svgIcon=\"people\"></mat-icon>\n        <span class=\"text\" [transValues]=\"{workspace: data.workspace.name}\" trans>Members of :workspace</span>\n    </div>\n\n    <div class=\"animation-container\">\n        <ul class=\"member-list unstyled-list\" *ngIf=\"loadingMembers$ | async\" @fadeOut>\n            <li class=\"member-list-item\" *ngFor=\"let i of [1, 2, 3]\">\n                <skeleton variant=\"avatar\"></skeleton>\n                <div class=\"details\">\n                    <skeleton></skeleton>\n                    <skeleton></skeleton>\n                </div>\n            </li>\n        </ul>\n\n        <ul class=\"member-list unstyled-list\">\n            <li *ngFor=\"let member of members$ | async\" class=\"member-list-item\" @fadeIn (@fadeIn.done)=\"container.style.overflow = 'auto'\">\n                <img [src]=\"member.avatar\" alt=\"\">\n                <div class=\"details\">\n                    <div class=\"email\">\n                        <span>{{member.display_name}}</span>\n                        &ngsp;\n                        <span class=\"strong\"\n                              *ngIf=\"currentUser.get('id') === member.id\" trans>(You)</span>\n                        <span *ngIf=\"member.model_type === 'invite'\">\n                        ·\n                        <span trans>Invited</span>\n                       <ng-container *ngIf=\"canInvite\">\n                            ·\n                            <button type=\"button\" class=\"no-style resend-invite-button\"\n                                    [disabled]=\"inviting$ | async\"\n                                    (click)=\"maybeResendInvite(member)\" trans>Resend Invite</button>\n                       </ng-container>\n                    </span>\n                    </div>\n                    <div class=\"invited_at\">{{member.email}}</div>\n                </div>\n                <div class=\"actions\">\n                    <button type=\"button\" mat-stroked-button class=\"role-trigger-button\"\n                            [class.not-clickable]=\"member.is_owner || !canEdit\"\n                            [matMenuTriggerFor]=\"selectRoleMenu\"\n                            [matMenuTriggerData]=\"{member: member}\">\n                        <span trans>{{member.role_name}}</span>\n                        <mat-icon svgIcon=\"keyboard-arrow-down\"\n                                  class=\"dropdown-icon\"></mat-icon>\n                    </button>\n                    <button type=\"button\" class=\"delete-member-button\"\n                            (click)=\"maybeDeleteMember(member)\"\n                            *ngIf=\"member.is_owner || currentUser.get('id') !== member.id\"\n                            [class.visually-hidden]=\"member.is_owner || !canDelete\"\n                            mat-icon-button [disabled]=\"deleting$ | async\">\n                        <mat-icon svgIcon=\"close\"></mat-icon>\n                    </button>\n                    <button type=\"button\" class=\"delete-member-button\"\n                            [matTooltip]=\"'Leave workspace' | trans\"\n                            (click)=\"maybeLeaveWorkspace(member)\"\n                            *ngIf=\"!member.is_owner && currentUser.get('id') === member.id\"\n                            mat-icon-button [disabled]=\"deleting$ | async\">\n                        <mat-icon svgIcon=\"exit-to-app\"></mat-icon>\n                    </button>\n                </div>\n            </li>\n        </ul>\n    </div>\n</mat-dialog-content>\n\n<mat-menu #selectRoleMenu=\"matMenu\">\n    <ng-template matMenuContent let-member=\"member\">\n        <div class=\"multiline-mat-menu-item with-icon\"\n             [class.active]=\"member.role_id === role.id\" mat-menu-item\n             (click)=\"changeRole(member, role)\"\n             *ngFor=\"let role of workspaceRoles$ | async\" trans>\n            <mat-icon svgIcon=\"check\"\n                      [class.visually-hidden]=\"member.role_id !== role.id\"></mat-icon>\n            <div class=\"menu-item-content\">\n                <div class=\"title\" trans>{{role.name}}</div>\n                <div class=\"description\" trans>{{role.description}}</div>\n            </div>\n        </div>\n    </ng-template>\n</mat-menu>\n\n\n","import {ChangeDetectionStrategy, Component, Inject, OnInit} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {FormControl} from '@angular/forms';\nimport {Role} from '@common/core/types/models/Role';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {WorkspacesService} from '../workspaces.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ValueLists} from '@common/core/services/value-lists.service';\nimport {Workspace} from '../types/workspace';\nimport {WorkspaceMember} from '../types/workspace-member';\nimport {WorkspaceInvite} from '../types/workspace-invite';\nimport {finalize} from 'rxjs/operators';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {WorkspaceMessages} from '../workspace-messages';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {animate, style, transition, trigger} from '@angular/animations';\nimport {LEAVE_WORKSPACE_CONFIRMATION} from '../leave-workspace-confirmation';\n\nexport interface ManageWorkspaceMembersModalData {\n    workspace?: Workspace;\n}\n\ntype MemberOrInvite = WorkspaceMember | WorkspaceInvite;\n\n@Component({\n    selector: 'manage-workspace-members-modal',\n    templateUrl: './manage-workspace-members-modal.component.html',\n    styleUrls: ['./manage-workspace-members-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [\n        trigger('fadeIn', [\n            transition(':enter', [\n                style({opacity: 0}),\n                animate('325ms ease-in', style({\n                    opacity: 1,\n                }))\n            ])\n        ]),\n        trigger('fadeOut', [\n            transition(':leave', [\n                style({opacity: 1, position: 'absolute', left: '0', right: '0'}),\n                animate('325ms ease-out', style({\n                    opacity: 0\n                }))\n            ])\n        ])\n    ]\n})\nexport class ManageWorkspaceMembersModalComponent implements OnInit {\n    public inviting$ = new BehaviorSubject(false);\n    public deleting$ = new BehaviorSubject(false);\n    public loadingMembers$ = new BehaviorSubject(false);\n    public workspaceRoles$ = new BehaviorSubject<Role[]>([]);\n    public members$ = new BehaviorSubject<(WorkspaceMember|WorkspaceInvite)[]>([]);\n    public peopleToInvite = new FormControl([]);\n\n    public canInvite = false;\n    public canEdit = false;\n    public canDelete = false;\n\n    constructor(\n        private dialogRef: MatDialogRef<ManageWorkspaceMembersModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: ManageWorkspaceMembersModalData,\n        private workspaces: WorkspacesService,\n        private toast: Toast,\n        private valueLists: ValueLists,\n        public currentUser: CurrentUser,\n        private modal: Modal,\n    ) {}\n\n    ngOnInit() {\n        this.loadingMembers$.next(true);\n        this.valueLists.get(['workspaceRoles']).subscribe(response => {\n            this.workspaceRoles$.next(response.workspaceRoles);\n        });\n        this.workspaces.get(this.data.workspace.id)\n            .pipe(finalize(() => this.loadingMembers$.next(false)))\n            .subscribe(response => {\n                this.members$.next([\n                    ...response.workspace.invites,\n                    ...response.workspace.members\n                ]);\n                this.setCurrentUserPermissions();\n            });\n    }\n\n    public close(workspace?: Workspace) {\n        this.dialogRef.close(workspace);\n    }\n\n    public invitePeople() {\n        const emails = this.peopleToInvite.value.filter(email => {\n            return !this.members$.value.find(m => m.email === email);\n        });\n        if ( ! emails.length) {\n            this.peopleToInvite.reset();\n            this.toast.open('All invited people are already members.');\n            return;\n        }\n        const payload = {\n            emails,\n            roleId: (this.workspaceRoles$.value.find(r => r.default) || this.workspaceRoles$.value[0]).id,\n        };\n        this.inviting$.next(true);\n        this.workspaces.invitePeople(this.data.workspace.id, payload)\n            .pipe(finalize(() => this.inviting$.next(false)))\n            .subscribe(response => {\n                this.members$.next([...this.members$.value, ...response.invites]);\n                this.peopleToInvite.reset();\n                this.toast.open(WorkspaceMessages.INVITES_SENT);\n            });\n    }\n\n    public resendInvite(invite: WorkspaceInvite) {\n        this.inviting$.next(true);\n        this.workspaces.resendInvite(this.data.workspace.id, invite.id)\n            .pipe(finalize(() => this.inviting$.next(false)))\n            .subscribe(() => {\n                this.toast.open(WorkspaceMessages.INVITE_RESENT);\n            });\n    }\n\n    public changeRole(member: WorkspaceMember|WorkspaceInvite, role: Role) {\n        this.workspaces.changeRole(this.data.workspace.id, member, role.id)\n            .subscribe(() => {\n                this.toast.open(WorkspaceMessages.ROLE_ASSIGNED);\n                const members = [...this.members$.value];\n                const i = members.findIndex(m => m.id === member.id);\n                members[i].role_name = role.name;\n                members[i].role_id = role.id;\n                this.members$.next(members);\n            });\n    }\n\n    public deleteMember(member: MemberOrInvite) {\n        this.deleting$.next(true);\n        const request = member.model_type === 'member' ?\n            this.workspaces.deleteMember(this.data.workspace.id, member.id) :\n            this.workspaces.deleteInvite(member.id);\n        request\n            .pipe(finalize(() => this.deleting$.next(false)))\n            .subscribe(() => {\n                const value = [...this.members$.value];\n                const i = value.findIndex((m: MemberOrInvite) => member.id && m.model_type === member.model_type);\n                value.splice(i, 1);\n                this.members$.next(value);\n                if (member.id === this.currentUser.get('id')) {\n                    this.close();\n                    this.toast.open(WorkspaceMessages.LEFT_WORKSPACE);\n                } else {\n                    this.toast.open(WorkspaceMessages.MEMBER_DELETED);\n                }\n            });\n    }\n\n    public maybeDeleteMember(member: MemberOrInvite) {\n        this.modal.show(ConfirmModalComponent, {\n            title: `Delete Member`,\n            body:  `Are you sure you want to delete this member?`,\n            bodyBold: 'All workspace resources created by this member will be transferred to workspace owner.',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if (confirmed) {\n                this.deleteMember(member);\n            }\n        });\n    }\n\n    public maybeResendInvite(invite: WorkspaceInvite) {\n        this.modal.show(ConfirmModalComponent, {\n            title: `Resend Invite`,\n            body:  `Are you sure you want to send this invite again?`,\n            ok:    'Resend'\n        }).afterClosed().subscribe(confirmed => {\n            if (confirmed) {\n                this.resendInvite(invite);\n            }\n        });\n    }\n\n    public maybeLeaveWorkspace(member: WorkspaceMember) {\n        this.modal.show(ConfirmModalComponent, LEAVE_WORKSPACE_CONFIRMATION)\n            .afterClosed()\n            .subscribe(confirmed => {\n                if (confirmed) {\n                    this.deleteMember(member);\n                }\n            });\n    }\n\n    private setCurrentUserPermissions() {\n        const member = this.members$.value.find(m => m.id === this.currentUser.get('id')) as WorkspaceMember;\n        this.canInvite = member.is_owner || !!member.permissions.find(p => p.name === 'workspace_members.invite');\n        this.canEdit = member.is_owner || !!member.permissions.find(p => p.name === 'workspace_members.update');\n        this.canDelete = member.is_owner || !!member.permissions.find(p => p.name === 'workspace_members.delete');\n    }\n}\n"]}